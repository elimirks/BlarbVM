;7 3 nandi    ; Should be -4
;4 12 andi    ; Should be 4
;0 noti       ; Should be -1 (all ones)
;8 4 ori      ; Should be 12
;8 12 xori    ; Should be 4
;255 lshiftilone ; Should be 510
;9 128 addi   ; Should be 137
;37 12 subi   ; Should be 25
;2 2 2 42 3 seti

1 2 lshiftil ; Should be 4

exit



; ANDs the two immediate values
; Circuit: (A NAND B) NAND (A NAND B)
#andi
	4 3 ! ; A NAND B
	4 4 !

	2 0 ~ 2 ^ ; Pop the stack frame



; NANDs the two immediate values
#nandi ;
	4 3 !         ; Nand it up
	2 1 ~ 2 ^ 1 $ ; Get rid of extra argument
	2 0 ~ 1 ^     ; return



; NOTs the immediate value
; Circuit: A NAND A
#noti
	3 3 ! ; NAND the arg with itself
	2 0 ~ 1 ^



; ORs the two immediate values
; Circuit: (A NAND A ) NAND (B NAND B)
#ori
	4 4 !
	3 3 !
	4 3 !
	2 0 ~ 2 ^



; XORs the two immediate values
; Circuit: (A NAND B) AND (A OR B)
; I wrote this guy without pure NANDs for sanity reasons
#xori
	4 1 ~ 1 $ ; Copy A and B
	4 1 ~ 1 $
	nandi

	5 1 ~ 1 $ ; Copy A and B again
	5 1 ~ 1 $
	ori

	andi

	2 1 ~ 1 ^ ; Pop n' store
	2 0 ~ 3 ^ 1 $ ; Return the stored result



#lshiftilone
	; Bit mask array (null terminated)
	0 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536
	131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432
	67108864 134217728 268435456 536870912 1073741824 2147483648 0

	37 1 ~ 1 $ ; Copy of the param
	lshiftiloleloop

#lshiftiloleloop
	1 ^ ; Pop the return address (hack)
	3 ? lshiftilonerun
	; At this point, there will just be 0,1,<returnvalue> on the stack
	2 1 ~
	5 0 ~ 5 ^ 1 $
#lshiftilonerun
	1 ^ ; Pop the return address (hack)

	;0 1 2 4 .. 128 0 value

	; Check if the bit is set (a new boolean will be on the stack)
	2 1 ~ 1 $
	5 1 ~ 1 $
	andi

	; Copy the mutating return value
	3 1 ~ 1 $

	6 1 ~ 1 $ noti ; Invert the next single bit mask
	andi ; unset the next bit

	; Set the next bit if the above boolean is true
	2 ? 5 1 ~ 1 $ ori

	; Pop n drop!
	2 1 ~ 4 ^ 1 $

	lshiftiloleloop



; A B lshiftil -> A shifted left be B bits
#lshiftil
	3 copy ; A

	; If B is 0, return (base case)
	3 copy
	tobooli
	1 xori
	1 ? 4 0 ~ 3 1 ~ 5 ^ 1 $
	1 ^

	; Recursive case - shift and recurse!

	lshiftilone ; Shift A

	; Decrement B
	3 copy
	1 subi

	lshiftil

	3 0 ~ 2 1 ~ 4 ^ 1 $




; Recursive adder
#addi
	; Base case: If the param B is 0, return param A by itself.
	3 1 ~ 1 $ tobooli
	1 xori ; negate the boolean
	1 ? 3 0 ~ 3 ^ ; return A
	1 ^ ; Pop the above conditional boolean

	4 1 ~ 1 $ ; Copy A and B
	4 1 ~ 1 $
	xori ; sum

	5 1 ~ 1 $ ; Copy A and B again
	5 1 ~ 1 $
	andi ; carry
	lshiftilone

	addi ; Recurse!

	2 1 ~
	3 0 ~ 4 ^ 1 $



; Subtract: A B subi -> A - B
#subi
	; Two's compliment of B
	3 1 ~ 1 $ noti
	1 addi

	5 1 ~ 1 $ ; A
	addi ; A - B

	2 1 ~
	3 0 ~ 4 ^ 1 $



; Usage: index copy
; Copies the word on the stack at "index" to the top of the stack
#copy
	3 1 ~ 1 $ 3 addi ; index
	1 ~
	2 0 ~ 2 ^ 1 $



; Usage: value index seti
; Set's a word on the stack (at "index") to "value"
#seti
	3 copy ; value

	3 copy ; index
	5 addi
	1 copy

	0 ! ; Set the value at the given index to all 1s
	1 copy

	3 ! ; At this point, the stack var is the inverse of what it should be
	1 subi
	1 copy
	!
	3 0 ~ 4 ^



#tobooli
	2 ? 2 0 ~ 2 ^ 1
	2 0 ~ 2 ^ 0



#exit
	100000 2 0 ~ 2 ^; hack to exit - jump to line 100000

