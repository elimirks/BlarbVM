[[./logo.jpg]]

* BlarbVM
Blarb is designed to be the simplest possible systems programming language. Being as such, there is only one logical operator: NAND. It is an assembly-like, stack & register based language.

** Architecture
   In Blarb, there is a stack, heap, and [[Registers][registers]]. On the stack, every element is a 64-bit integer. To access the heap, you must use the [[System Calls][brk system call]].
   
   When you include a file with the [[Include File]["@" operator]], the tokens in that file will be appended to the parse tree - thus, you should _always_ exit the VM by setting the 0th [[Registers][register]] to a number less than -1, or call "exit" if you are using the [[Standard Library][standard library]].
   
   Note: The heap doesn't use virtual addresses yet (coming soon), so when it is expanding, there is no guarantee that your memory will stay in the same place. For now, you should only use the heap for buffering... or if you feel ambitious, implement your own virtual memory addressing within Blarb code!
** Registers
   There are 8 registers, numbered 0-7. The 0th register is the line pointer - that is, the line that is currently being evaluated. Registers 1-3 are short term registers, that may change when you call a function or jump to a label. Registers 4-7 are guaranteed to _never_ be used in lib.blarb (which I'll explain later), so you can use them for long term storage in your userspace programs.
   
   Setting the line pointer register to a number less than -1 will terminate the VM. Alternatively, see the "exit" function in the [[Standard Library][standard library]].

|------------+---------------------|
| Register # | Description         |
|------------+---------------------|
|          0 | Line Pointer        |
|        1-3 | Temporary Registers |
|        4-7 | User Registers      |
|------------+---------------------|

** Literals
   There are only two types of type literals in blarb:
*** Integers
    64-bit singed integers - can be negative.
*** Strings
    In Blarb, a string is simply a null-terminated sequence of numbers on the stack. Typing a string literal in will translate into a null-terminated sequence, for sanity. To escape a quotation, use "\"". To escape backslashes, use "\\". Newlines and tabs are escaped with "\n" and "\t", as usual.
*** Characters
    Characters are parsed like strings, but get turned into integer types when parsed. Thus, like most other language, a character can only contain a single byte (the character escapes still work).
** Operations
   There are currently 8 single-letter operations. Additionally, you can type a single number to push that number onto the stack (64-bit signed integer). Space between operators and integers or function calls is optional.

*** NAND
    b a ! NANDS index a with index b and stores the result in index b
*** Store Register
    a b ~ Store the value at index a in register b
*** Get Register
    a $ Push register a onto the stack
*** Pop from Stack
    a ^ pop 'a' elements
*** Conditional
    a ? if index a is true (non-zero), execute the rest of the line
*** Include File
    "filename.blarb" @ Include the given file 
*** System Calls
    f e d c b a % Execute the system call with the given args
    
    Upon syscall error (returning -1), the Blarb VM will terminate. This may change in the future.
*** Set Memory Address
    a b = Swap the value at memory address at index b to the byte (8 bits) at index a of the stack
    
    The value at stack index b should contain a valid memory address (see examples in lib.blarb, for now..)
** Labels
   Labels are created by a hash:
   
   #+begin_src blarb
     #labelname
   #+end_src
   and called by simply writing their name.
   
   When jumping to a label, the line that the label is on will be executed, ignoring "#labelname".

   No tokens are allowed after a *jump* to a label, and you will get a parse error if you do so. Thus, a label call must be the last statement on a given line, if present.
   
*** Functions
    Blarb functions are a loosely defined construct, like in assembly, they are just labels. One scoop, though, is that whenever you call a function (e.g. "addi"), the current line number will automatically be pushed to the stack, acting as a return address.
    
    Example:
   #+begin_src blarb
     ; Pushes the current line to the stack
     ; The stack will now contain 2, 3, and the current line number
     ; No token are allowed after a call to a label
     2 3 andi

     -2 2 0 ~ 1 ^ ; exit the VM by setting the line pointer to -2

     ; Bitwise AND the two arguments and push the result to the stack
     #andi
         4 3 ! ; A NAND B (the two arguments)
         4 4 ! ; NAND the result with itself to bitwise NOT it

         ; Pop the stack frame and second argument.
         ; The remaining stack data will only include the return value
         ; The "2 0 ~" sets the line pointer to the return address
         ; The "2 ^" pops the return address and the second argument
         2 0 ~ 2 ^

     ; Run this program with "--debug" to see the result on the stack
   #+end_src
*** Control Statements
    Control structures are nothing special in Blarb either - they can be hacked together using labels.
    One hickup with labels is that, when you call one, it automatically pushes the return address to the stack. For functions this looks nice, but with control structures you usually don't care about the return address, so you will generally want to pop it off using "1^" (which is the same as "1 ^").

    Loop example:
    #+begin_src blarb
      ; This program will pop all the numbers on the stack until it hits a 0

      ; Pushes a bunch of numbers onto the stack
      32 52 42 0 1 52 35203 3502462

      ; Call the loop label so the return address will be on the stack
      loop
      #loop 1^ ; 1^ pops the return address - we want to discard it in loops
          1? 1^ loop

      ; Pop the 0 for good measure
      1^
   #+end_src
* Standard Library
  Note: Without the standard library, it will be extremely difficult to do anything - so you will probably want to include "lib.blarb" in all your programs.
  
  The standard library includes tons of useful functions - everything from bitwise operations to functions that will print string literals for you!
  
  Recall: Functions are called with "<args> functionname".

  As of writing this document, the standard library includes:
  
  |------------------+-------+-------------------------------------------------|
  | Function         | Args  | Description                                     |
  |------------------+-------+-------------------------------------------------|
  | nandi            | A B   | Bitwise NANDs the two top items on the stack    |
  |------------------+-------+-------------------------------------------------|
  | andi             | A B   | Bitwise ANDs the two top items on the stack     |
  |------------------+-------+-------------------------------------------------|
  | noti             | A     | Bitwise NOTs the top item on the stack          |
  |------------------+-------+-------------------------------------------------|
  | ori              | A B   | Bitwise ORs the top two items on the stack      |
  |------------------+-------+-------------------------------------------------|
  | xori             | A B   | Bitwise XORs the top two items on the stack     |
  |------------------+-------+-------------------------------------------------|
  | lshiftilone      | A     | Bit shifts the top item left left by one bit    |
  |------------------+-------+-------------------------------------------------|
  | addi             | A B   | Adds the top two elements on the stack          |
  |------------------+-------+-------------------------------------------------|
  | subi             | A B   | Subtracts B from A (A - B)                      |
  |------------------+-------+-------------------------------------------------|
  | seti             | V I   | Set's the word on the stack at                  |
  |                  |       | index I to value V                              |
  |------------------+-------+-------------------------------------------------|
  | lshiftil         | A B   | Shift A left by B bits                          |
  |------------------+-------+-------------------------------------------------|
  | iseqi            | A B   | Checks if A is equal to B.                      |
  |                  |       | Returns 1 if true, 0 if false.                  |
  |------------------+-------+-------------------------------------------------|
  | pushbytetoheapi  | A     | Pushes a _BYTE_ to the heap.                    |
  |                  |       | Returns the address of the byte.                |
  |------------------+-------+-------------------------------------------------|
  | stackstrlen      | A     | Push the length of the string at                |
  |                  |       | stack position A to the stack.                  |
  |------------------+-------+-------------------------------------------------|
  | print            | A B   | Prints the string at index A of length B        |
  |------------------+-------+-------------------------------------------------|
  | printline        | S     | Prints a null terminated string S, with a       |
  |                  |       | newline character.                              |
  |------------------+-------+-------------------------------------------------|
  | readchar         | D     | Reads a single character from descriptor D.     |
  |------------------+-------+-------------------------------------------------|
  | pushstringtoheap | I     | Pushes the string at index I to the heap.       |
  |                  |       | Retruns the memory address of the string on the |
  |------------------+-------+-------------------------------------------------|
  | openwithname     | S F M | Opens the file of the null terminated string S. |
  |                  |       | F are the open syscall flags, M is the mode.    |
  |                  |       | See the open syscall docs for more information. |
  |                  |       | Returns the file descriptor number              |
  |------------------+-------+-------------------------------------------------|
  | closedescriptor  | A     | Closes file descriptor A                        |
  |------------------+-------+-------------------------------------------------|
  | exit             | (n/a) | Terminates your program                         |
  |------------------+-------+-------------------------------------------------|
* Syntax Highlighting
  See the [[https://github.com/elimirks/BlarbVM/tree/master/editors][editors]] directory for some syntax highlighting plugins. Currently there are only Vim and Emacs plugins.
* Examples
   See the [[https://github.com/elimirks/BlarbVM/tree/master/examples][examples]] directory for worked examples. Call them from same directory that has "lib.blarb". If you freshly cloned this project, this means running "./blarb --debug example/function.blarb", for instance.
