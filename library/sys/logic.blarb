; ANDs the two immediate values
; Circuit: (A NAND B) NAND (A NAND B)
#andi
    4 3 ! ; A NAND B
    4 4 !

    2 0 ~ 2^ ; Pop the stack frame



; NANDs the two immediate values
#nandi
    4 3 !       ; Nand it up
    2 1 ~ 2^ 1$ ; Get rid of extra argument
    2 0 ~ 1^    ; return



; NOTs the immediate value
; Circuit: A NAND A
#noti
    3 3 ! ; NAND the arg with itself
    2 0 ~ 1^



; ORs the two immediate values
; Circuit: (A NAND A) NAND (B NAND B)
#ori
    4 4 !
    3 3 !
    4 3 !
    2 0 ~ 2^



; XORs the two immediate values
; Circuit: (A NAND B) AND (A OR B)
#xori
    4 1 ~ 1$ ; Copy A
    2 4 !    ; A NAND B

    1$ 5 2 ~ 2$          ; Copy A and B
    3 3 ! 2 2 ! 3 2 ! 1^ ; A OR B

    3 2 ! 3 3 ! 1^ ; AND the two values on the stack

    2 1 ~ 3 0 ~ 4^ 1$ ; Return the stored result

; Pushes a null-terminated bitmask list to the stack
#pushincreasingbitmasklist
    2 0 ~ 1^ 0 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736 137438953472 274877906944 549755813888 1099511627776 2199023255552 4398046511104 8796093022208 17592186044416 35184372088832 70368744177664 140737488355328 281474976710656 562949953421312 1125899906842624 2251799813685248 4503599627370496 9007199254740992 18014398509481984 36028797018963968 72057594037927936 144115188075855872 288230376151711744 576460752303423488 1152921504606846976 2305843009213693952 4611686018427387904 9223372036854775808



#rshiftilone
    0$pushincreasingbitmasklist
    68 1 ~ 1$ ; Copy of the param
    0         ; Accumulator

    #rshiftiloneloop
    4? rshiftilonerun
    6 0 ~ 2 1 ~ 6^ 1$; Return the accumulator
    #rshiftilonerun
    ; Check if the bit is set (a new boolean will be on the stack)
    4 1 ~ 1$
    4 1 ~ 1$
    0$andi

    4 1 ~ 3 2 ~ 2 3 ~ 4^ 1$ 2$ 3$ ; Remove the top-most list elements

    1? 1^ rshiftiloneaddtoaccumulator
    1^ rshiftiloneloop
    #rshiftiloneaddtoaccumulator
    4 1 ~ 1$ 0$ori ; Add next bit to the accumulator
    rshiftiloneloop



; A B rshiftil -> A shifted right by B bits
#rshiftil
    4 1 ~ 1$ ; Parameter A (the value to shift)
    4 1 ~ 1$ ; Decrementor B

    #rshiftilloop
    1? rshiftilrun
    4 0 ~ 3 1 ~ 5^ 1$ ; Return the value when the decrementor hits 0
    #rshiftilrun

    1 0$subi ; Decrement
    ; Perform the shift
    3 1 ~ 1$ 0$rshiftilone
    2 1 ~ 3 2 ~ 3^ 1$ 2$

    rshiftilloop


#lshiftilone
    0$pushincreasingbitmasklist
    0

    69 1 ~ 1$ ; Copy of the param

    #lshiftiloneloop
    3? lshiftilonerun
    ; At this point, there will just be 0,1,<returnvalue> on the stack
    2 1 ~
    5 0 ~ 5^ 1$

    #lshiftilonerun
    ; Check if the bit is set (a new boolean will be on the stack)
    2 1 ~ 1$
    5 1 ~ 1$
    0$andi

    ; Copy the mutating return value
    3 1 ~ 1$

    6 1 ~ 1$ 0$noti ; Invert the next single bit mask
    0$andi ; unset the next bit

    ; Set the next bit if the above boolean is true
    2? 5 1 ~ 1$ 0$ori

    ; Pop n drop!
    2 1 ~ 4^ 1$

    lshiftiloneloop



; A B lshiftil -> A shifted right by B bits
#lshiftil
    4 1 ~ 1$ ; Parameter A (the value to shift)
    4 1 ~ 1$ ; Decrementor B

    #lshiftilloop
    1? lshiftilrun
    4 0 ~ 3 1 ~ 5^ 1$ ; Return the value when the decrementor hits 0
    #lshiftilrun

    1 0$subi ; Decrement
    ; Perform the shift
    3 1 ~ 1$ 0$lshiftilone
    2 1 ~ 3 2 ~ 3^ 1$ 2$

    lshiftilloop



; Recursive adder
#addi
    2? add_continue
    ; Base case: If the param B is 0, return param A by itself.
    4 1 ~ 2 0 ~ 3^ 1$

    #add_continue
    4 1 ~ 1$ ; Copy A and B
    4 1 ~ 1$
    0$xori ; "sum" bit's, excluding carries.

    5 1 ~ 1$ ; Copy A and B again
    5 1 ~ 1$
    0$andi        ; Carry bits
    0$lshiftilone ; Shift the carry bits before recursing

    0$addi ; Recurse, with only the carry bits.

    2 1 ~
    3 0 ~ 4^ 1$



; Subtract: A B subi -> A - B
#subi
    ; Two's compliment of B
    3 1 ~ 1 $ 0$noti
    1 0$addi

    5 1 ~ 1$ ; A
    0$addi ; A - B

    2 1 ~
    3 0 ~ 4^ 1$



; Multiple two immediate values together
; Note: This "does not care" about negative numbers
; This algorithm is trivial.
; It will add the first number to itself, while decrementing the second number.
; If the second number starts out at 0, this returns 0, as expected.
#multiplyi
    ; A B ReturnAddress
    0        ; Accumulator (start at 0)
    3 0$copy ; Decrementor (Copy of second parameter)

    #multiplyicheckfor0
    1? multiplyiloop

    ; Return the result if the second parameter reaches 0
    3 1 ~ 4 0 ~ 5^ 1$

    #multiplyiloop
    1 0$subi ; Subtract from the decrementor.

    5 0$copy ; First param
    3 0$copy ; Accumulator
    0$addi   ; Add them
    
    3 0$seti ; Set the accumulator to the result
    
    multiplyicheckfor0



; Divieds two given integers. The remainder is returned as a second argument
; Note: This "does not care" about negative numbers
; This algorithm is trivial.
; It will repeatedly decrement the denominator from the numerator.
; Once the denominator is greater than the numerator, it returns the
; subtraction count and remainder of the numerator.
#dividei
    0 ; Accumulator (how many divisions took place)
    3 0$copy  ; Denominator (D)
    5 0$copy  ; Decrementing numerator (N)

    #divideiloop

    ; Is N >= D?
    1 0$copy
    3 0$copy
    0$isgei
    1? 1^ divideiinc
    1^

    ; Retrun the division value and remainder
    4 1 ~ 2 2 ~ 5 0 ~ 7^ 1$ 2$

    #divideiinc
    ; Subtract denomitorator from decreasing numerator
    2 0$copy
    0$subi

    ; Increase the accumulator
    3 0$copy
    1 0$addi
    5 2 0$swap
    1^

    divideiloop


; Usage: index copy
; Copies the word on the stack at "index" to the top of the stack
#copy
    3 1 ~ 1$ 3 0$addi ; index
    1 ~ 2 0 ~ 2^ 1$



; Usage: I1 I2 swap
; Swaps the contents of the two given stack indices (I1 and I2)
#swap
    ; Get first element
    3 0$copy
    2 0$addi
    0$copy

    ; Get second element
    3 0$copy
    3 0$addi
    0$copy

    ; Set first element
    5 0$copy
    4 0$addi
    0$seti

    ; Set second element
    3 0$copy
    3 0$addi
    0$seti

    2 0 ~ 3^



; Usage: value index seti
; Set's a word on the stack (at "index") to "value"
#seti
    3 0$copy ; value

    3 0$copy ; index
    5 0$addi
    1 0$copy

    0 ! ; Set the value at the given index to all 1s
    1 0$copy

    3 ! ; At this point, the stack var is the inverse of what it should be
    1 0$subi
    1 0$copy
    !
    3 0 ~ 4^



; A jumpi -> jump by A lines
#jumpi
    0$addi
    2 0 ~ 1^



; Checks if two numbers are equal
; Returns 1 if they are equal, 0 if not.
#iseqi
    3 0$copy
    3 0$copy
    0$xori
    1? 3 0 ~ 4^ 0
    3 0 ~ 4^ 1



; Checks if A >= B
#isgei
    3 0$copy
    3 0$copy
    0$subi

    ; Check if the highest bit is set (if the result is negative)
    9223372036854775808 0$andi

    1? 3 0 ~ 4^ 0 ; Return 0
    3 0 ~ 4^ 1    ; Return 1



#tobooli
    2? 2 0 ~ 2^ 1
    2 0 ~ 2^ 0